# @configure_input@

top_builddir = @abs_top_builddir@
srcdir       = @srcdir@
prefix       = @prefix@
exec_prefix  = @exec_prefix@
bindir       = @bindir@
libdir       = @libdir@
includedir   = @includedir@
datarootdir  = @datarootdir@
runstatedir  = @runstatedir@
datadir      = @datadir@
mandir       = @mandir@

VPATH = @srcdir@

INSTALL_OPTIONS  =
INSTALL          = @INSTALL@ $(INSTALL_OPTIONS)
INSTALL_DATA_DIR = @INSTALL_DATA_DIR@
INSTALL_DATA     = @INSTALL_DATA@
INSTALL_PROGRAM  = @INSTALL_PROGRAM@
INSTALL_SCRIPT   = @INSTALL_SCRIPT@
INSTALL_LIBRARY  = @INSTALL_LIBRARY@

PACKAGE_NAME    = @PACKAGE_NAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_TARNAME = @PACKAGE_TARNAME@

TCL_BIN_DIR	= @TCL_BIN_DIR@
TCL_SRC_DIR	= @TCL_SRC_DIR@
#TK_BIN_DIR	= @TK_BIN_DIR@
#TK_SRC_DIR	= @TK_SRC_DIR@

TDK_TCLKIT     = @TDK_TCLKIT@
TDK_TCLSH_PROG = @TDK_TCLSH_PROG@
TDK_WISH_PROG  = @TDK_WISH_PROG@

kext = @TDK_KIT_EXT@

TDK_APPS = \
	xref$(kext) \
	vfse$(kext) \
	tclapp$(kext) \
	tape$(kext) \
	lsmfs$(kext) \
	inspector$(kext) \
	debug$(kext) \
	comp$(kext) \
	check$(kext)

TDK_COMPILER_LIBS = tbcload tclcompiler tclparser

all: $(TDK_COMPILER_LIBS) apps

$(TDK_COMPILER_LIBS):
	cd lib/$@ && $(MAKE) all

apps: $(TDK_APPS)

TDK_COMPILER_PKGS = \
	tbcload \
	tclcompiler \
	tclparser

TDK_INTERNAL_PKGS = \
	afs \
	tcldevkit::appframe \
	hpane \
	checker \
	cmatch \
	engine \
	debugger \
	view \
	vtree \
	help \
	ico \
	image \
	listentry \
	clogwindow \
	teapot::metadata \
	as::cache::async \
	oomk \
	osx::bundle::app \
	tdk_prowrap \
	teapot::package::gen \
	platform \
	pref::devkit \
	pref \
	pref::teapot \
	projectInfo \
	repository::local \
	selfile \
	splash \
	stringfileinfo \
	syscolor \
	tap::db \
	tapscan \
	tcldebugger_attach \
	tdk_appstartup \
	teapot::config \
	teapot::entity \
	teapot::link \
	tlocate \
	toolbar \
	tclapp::wrapengine \
	Entity

WRAP_PROG = $(TDK_TCLSH_PROG) $(srcdir)/app/tclapp/main.tcl
WRAP_PREFIX_ARG = `if test -n "@TDK_TCLKIT@"; then echo "-prefix @TDK_TCLKIT@"; else echo ""; fi`

DECL_WRAP_CMD = wrap_app() { \
	local OUTPUT="$$1"; \
	local APP_NAME=`echo "$$OUTPUT" | cut -f 1 -d '.'`; \
	local TOP_LEVEL_FILES=`for file in "$(srcdir)/artwork" "$(srcdir)/data/images"; do printf '%s/* ' "$${file}"; done`; \
	local APP_FILES=`find "$(srcdir)/app/$$APP_NAME" -type d`; \
	local APP_FILES_WITH_GLOB=`for file in $${APP_FILES}; do printf '%s/* ' "$${file}"; done`; \
	local PACKAGES=`for pkg in $(TDK_COMPILER_PKGS) $(TDK_INTERNAL_PKGS); do printf -- '-pkg %s ' "$${pkg}"; done`; \
	TCLAPP_PKGPATH="$(srcdir)" $(WRAP_PROG) \
		-relativeto "$(srcdir)/app/$$APP_NAME" "$(srcdir)/app/$$APP_NAME/main.tcl" \
		-relativeto "$(srcdir)/app/$$APP_NAME" $${APP_FILES_WITH_GLOB} $${PACKAGES} \
		-relativeto "$(srcdir)" $${TOP_LEVEL_FILES} $(WRAP_PREFIX_ARG) -out "$$OUTPUT"; \
}


$(TDK_APPS):
	$(DECL_WRAP_CMD); wrap_app $@


clean:
	cd lib/tbcload     && $(MAKE) $@
	cd lib/tclcompiler && $(MAKE) $@
	cd lib/tclparser   && $(MAKE) $@

Makefile: $(srcdir)/Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

#.PHONY: FORCE all clean check dist distcheck install uninstall

.PHONY: all apps clean
